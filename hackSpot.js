
const ExcelJS = require('exceljs');


async function clear() {
	const workbook = new ExcelJS.Workbook();
	await workbook.xlsx.readFile('../hack_excel/CIU Table.xlsx');
	const worksheet = workbook.getWorksheet('Spot');
	
	// –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –ø—è—Ç–∏ —Å—Ç—Ä–æ–∫
	worksheet.spliceRows(1, 5);

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤—É—Ö –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã
	worksheet.insertRow(1, []);
	worksheet.insertRow(1, []);

	// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —É—á–∏—Ç—ã–≤–∞—è —Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	worksheet.spliceColumns(1, 1); // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É A
	worksheet.spliceColumns(4, 1); // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É D, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –±—ã–≤—à—É—é E

	// –û—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
	for (let col = 1; col <= worksheet.columnCount; col++) {
		 worksheet.getRow(1).getCell(col).value = null;
		 worksheet.getRow(2).getCell(col).value = null;
	}

	// –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞–Ω–∏—Ü –≤—Å–µ—Ö —è—á–µ–µ–∫ –Ω–∞ –ª–∏—Å—Ç–µ
	worksheet.eachRow({ includeEmpty: true }, function(row) {
		row.eachCell({ includeEmpty: true }, function(cell) {
			 cell.border = {
				  top: { style: 'thin', color: { argb: 'FFD3D3D3' } },
				  left: { style: 'thin', color: { argb: 'FFD3D3D3' } },
				  bottom: { style: 'thin', color: { argb: 'FFD3D3D3' } },
				  right: { style: 'thin', color: { argb: 'FFD3D3D3' } }
			 };
		});
  });
  
	await workbook.xlsx.writeFile('../hack_excel/CIU_Table_modified.xlsx');
	return { workbook, worksheet }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º workbook –∏ worksheet –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}


//////////////////////////////////////////////////////////////////////////////////
function setBordersForNonEmptyCells(worksheet) {
	worksheet.eachRow({ includeEmpty: true }, function(row) {
		 row.eachCell({ includeEmpty: true }, function(cell) {
			  if (cell.value !== null && cell.value !== '') {
					cell.border = {
						 top: { style: 'thin', color: { argb: 'FF000000' } },
						 left: { style: 'thin', color: { argb: 'FF000000' } },
						 bottom: { style: 'thin', color: { argb: 'FF000000' } },
						 right: { style: 'thin', color: { argb: 'FF000000' } }
					};
			  }
		 });
	});
}

async function draw(worksheet) {
	// –¢–∞–∫ –∫–∞–∫ `setBordersForNonEmptyCells` —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –µ—ë —Å —Ç–µ–∫—É—â–∏–º –ª–∏—Å—Ç–æ–º
	setBordersForNonEmptyCells(worksheet);
}
 //////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
async function hackSpot() {
	const { workbook, worksheet } = await clear();
	await draw(worksheet); // –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π worksheet –∏–∑ `clear`
	await workbook.xlsx.writeFile('../hack_excel/CIU_Table_modified_final.xlsx'); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
}
hackSpot().then(() => console.log('–õ–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã üòé'));

