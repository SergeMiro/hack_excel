// const ExcelJS = require('exceljs');

// async function removeColumns() {
//   const workbook = new ExcelJS.Workbook();
//   await workbook.xlsx.readFile('../Excel project/CIU Table.xlsx'); // –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
//   const worksheet = workbook.getWorksheet('Spot'); // –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º—è –ª–∏—Å—Ç–∞
//   // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ A (–∏–Ω–¥–µ–∫—Å 1)
//   worksheet.spliceColumns(1, 1);
//   // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ A, –∫–æ–ª–æ–Ω–∫–∞ E —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–æ–ª–æ–Ω–∫–æ–π D (–∏–Ω–¥–µ–∫—Å 4)
//   worksheet.spliceColumns(4, 1); // –ò–Ω–¥–µ–∫—Å 4, —Ç.–∫. –∫–æ–ª–æ–Ω–∫–∞ E —Å–¥–≤–∏–Ω—É–ª–∞—Å—å –≤–ª–µ–≤–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ A

//   // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
//   worksheet.spliceRows(5, 1); // –£–¥–∞–ª–µ–Ω–∏–µ 5-–π —Å—Ç—Ä–æ–∫–∏
//   worksheet.spliceRows(4, 1); // –£–¥–∞–ª–µ–Ω–∏–µ 4-–π —Å—Ç—Ä–æ–∫–∏
//   worksheet.spliceRows(1, 1); // –£–¥–∞–ª–µ–Ω–∏–µ 1-–π —Å—Ç—Ä–æ–∫–∏

// // –ü–µ—Ä–µ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —è—á–µ–µ–∫ "—Ä–∞–∑—ä–µ–¥–∏–Ω—è–µ–º" —è—á–µ–π–∫–∏ –≤ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫–∞—Ö
// const totalColumns = worksheet.columnCount; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ columnCount –∞–∫—Ç—É–∞–ª–µ–Ω –∏ –æ—Ç—Ä–∞–∂–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
// for (let row = 1; row <= 2; row++) {
//   for (let col = 1; col <= totalColumns; col++) {
//     // –ó–¥–µ—Å—å –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω —à–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–ª—å - –æ—á–∏—Å—Ç–∏—Ç—å —è—á–µ–π–∫–∏ –æ—Ç —Ç–µ–∫—Å—Ç–∞
//     worksheet.getRow(row).getCell(col).value = null; // –ü—Ä—è–º–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ –≤ 'null', –æ—á–∏—â–∞—è –µ—ë
//   }
//  }
//  await workbook.xlsx.writeFile('../Excel project/CIU_Table_modified.xlsx'); // –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
// }
// removeColumns().then(() => console.log('–õ–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω–Ω—ã üòé'));




// // –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫
// function mergeCells() {
// 	const mergeRanges = [
// 		'A1:A2', // –ë—ã–≤—à–∞—è B
// 		'B1:B2', // –ë—ã–≤—à–∞—è C
// 		'C1:C2', // –ë—ã–≤—à–∞—è D
// 		'D1:E1', // –ë—ã–≤—à–∞—è E:F, E —É–¥–∞–ª–µ–Ω–∞, F —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è E
// 		'F1:G1', // –ë—ã–≤—à–∞—è G:H
// 		'H1:K1', // –ë—ã–≤—à–∞—è I:L –ø–æ—Å–ª–µ —Å–¥–≤–∏–≥–∞ –≤–ª–µ–≤–æ
// 		'L1:L2', // –ë—ã–≤—à–∞—è M
// 		'M1:M2', // –ë—ã–≤—à–∞—è N
// 		'N1:N2', // –ë—ã–≤—à–∞—è O
// 		'O1:O2'  // –ë—ã–≤—à–∞—è P
// 	 ];
// 	mergeRanges.forEach(range => {
// 	  try {
// 		 worksheet.mergeCells(range);
// 	  } catch (error) {
// 		 if (error.message === 'Cannot merge already merged cells') {
// 			console.log(`–Ø—á–µ–π–∫–∏ ${range} —É–∂–µ –±—ã–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã —Ä–∞–Ω—å—à–µ, –Ω–æ –Ω–∞–º –º–æ—Ä–µ –ø–æ –∫–æ–ª–µ–Ω–∞ üí¶`);
// 		 } else {
// 			throw error; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
// 		 }
// 	  }
// 	});
// 	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –∫–æ –≤—Å–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —è—á–µ–π–∫–∞–º
// 	mergeRanges.forEach(range => {
// 		worksheet.getCell(range.split(':')[0]).border = {
// 		top: { style: 'thin' },
// 		left: { style: 'thin' },
// 		bottom: { style: 'thin' },
// 		right: { style: 'thin' }
// 		};
// 	});
// 	// –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–∑—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
// }


// function hackSpot() {
// 	removeColumns()
// 	mergeCells()

// }








/////////////////////////////////////////////




const ExcelJS = require('exceljs');

async function removeColumns() {
  const workbook = new ExcelJS.Workbook();
  await workbook.xlsx.readFile('../Excel project/CIU Table.xlsx');
  const worksheet = workbook.getWorksheet('Spot');
  
  worksheet.spliceColumns(1, 1);
  worksheet.spliceColumns(4, 1); // –£—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è

  worksheet.spliceRows(5, 1);
  worksheet.spliceRows(4, 1);
  worksheet.spliceRows(1, 1);

  for (let row = 1; row <= 2; row++) {
    for (let col = 1; col <= worksheet.columnCount; col++) {
      worksheet.getRow(row).getCell(col).value = null;
    }
  }

  await workbook.xlsx.writeFile('../Excel project/CIU_Table_modified.xlsx');
  return { workbook, worksheet }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º workbook –∏ worksheet –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

async function mergeCells(worksheet) {
  const mergeRanges = [
    'A1:A2', 'B1:B2', 'C1:C2', 'D1:D2', 'E1:F1', 'F1:G1', 'H1:K1', 'L1:L2', 'M1:M2', 'N1:N2', 'O1:O2'
  ];

  mergeRanges.forEach(range => {
    try {
      worksheet.mergeCells(range);
    } catch (error) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${range}: ${error}`);
    }
  });

  mergeRanges.forEach(range => {
    worksheet.getCell(range.split(':')[0]).border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' }
    };
  });
}  

async function hackSpot() {
  const { workbook, worksheet } = await removeColumns();
  await mergeCells(worksheet);
  await workbook.xlsx.writeFile('../Excel project/CIU_Table_modified_final.xlsx'); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
}

hackSpot().then(() => console.log('–õ–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã, —è—á–µ–π–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã üòé'));
