const ExcelJS = require('exceljs');
const fs = require('fs');
const path = require('path');

async function clear() {
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile('../hack_excel/0.xlsx');
    const worksheet = workbook.getWorksheet('Spot');
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –ø—è—Ç–∏ —Å—Ç—Ä–æ–∫
    worksheet.spliceRows(1, 5);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 4x –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã
    worksheet.insertRow(1, []);
    worksheet.insertRow(1, []);
    worksheet.insertRow(1, []);
    worksheet.insertRow(1, []);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —É—á–∏—Ç—ã–≤–∞—è —Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    worksheet.spliceColumns(1, 1); // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É A
    worksheet.spliceColumns(4, 1); // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É D, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –±—ã–≤—à—É—é E
    worksheet.spliceColumns(16, 1); // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É R

    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    for (let col = 1; col <= worksheet.columnCount; col++) {
        worksheet.getRow(1).getCell(col).value = null;
        worksheet.getRow(2).getCell(col).value = null;
    }

    // –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞–Ω–∏—Ü –≤—Å–µ—Ö —è—á–µ–µ–∫ –Ω–∞ –ª–∏—Å—Ç–µ
    worksheet.eachRow({ includeEmpty: true }, function(row) {
        row.eachCell({ includeEmpty: true }, function(cell) {
             cell.border = {
                 top: { style: 'thin', color: { argb: 'FFD3D3D3' } },
                 left: { style: 'thin', color: { argb: 'FFD3D3D3' } },
                 bottom: { style: 'thin', color: { argb: 'FFD3D3D3' } },
                 right: { style: 'thin', color: { argb: 'FFD3D3D3' } }
             };
        });
    });

    await workbook.xlsx.writeFile('../hack_excel/1.xlsx');
    return { workbook, worksheet }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º workbook –∏ worksheet –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

function setBordersForNonEmptyCells(worksheet) {
    worksheet.eachRow({ includeEmpty: true }, function(row) {
         row.eachCell({ includeEmpty: true }, function(cell) {
              if (cell.value !== null && cell.value !== '') {
                    cell.border = {
                         top: { style: 'thin', color: { argb: 'FF000000' } },
                         left: { style: 'thin', color: { argb: 'FF000000' } },
                         bottom: { style: 'thin', color: { argb: 'FF000000' } },
                         right: { style: 'thin', color: { argb: 'FF000000' } }
                    };
              }
         });
    });
}

async function draw(worksheet) {
    // –¢–∞–∫ –∫–∞–∫ `setBordersForNonEmptyCells` —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –µ—ë —Å —Ç–µ–∫—É—â–∏–º –ª–∏—Å—Ç–æ–º
    setBordersForNonEmptyCells(worksheet);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏—Å—Ç–æ–≤ –∏ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
async function copyData(sourceWorkbook, sourceSheetName, targetWorkbook, targetSheetName) {
	const sourceSheet = sourceWorkbook.getWorksheet(sourceSheetName);
	const targetSheet = targetWorkbook.getWorksheet(targetSheetName);

	sourceSheet.eachRow(function(sourceRow, rowNumber) {
		 sourceRow.eachCell({ includeEmpty: true }, function(cell, colNumber) {
			  const targetCell = targetSheet.getCell(rowNumber, colNumber);
			  targetCell.value = cell.value;

			  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π —è—á–µ–µ–∫
			  if (cell.style) {
					targetCell.style = Object.assign({}, cell.style);
			  }
		 });
	});

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
	const fixedWidth = 15; // –ó–¥–µ—Å—å –∑–∞–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –≤ —Å–∏–º–≤–æ–ª–∞—Ö

	targetSheet.columns.forEach((column, colNumber) => {
		 column.width = fixedWidth;
	});

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–º —Ñ–∞–π–ª–µ
	await targetWorkbook.xlsx.writeFile('../hack_excel/result/template.xlsx');
}



async function hackSpot() {
    const { workbook, worksheet } = await clear();
    await draw(worksheet); // –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π worksheet –∏–∑ `clear`
    await workbook.xlsx.writeFile('../hack_excel/result/spot.xlsx'); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏—Å—Ç–æ–≤ –∏ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    const sourceWorkbook = new ExcelJS.Workbook();
    await sourceWorkbook.xlsx.readFile('../hack_excel/result/spot.xlsx');
    const targetWorkbook = new ExcelJS.Workbook();
    await targetWorkbook.xlsx.readFile('../hack_excel/result/template.xlsx');

    const sourceSheetName = 'Spot';
    const targetSheetName = 'Spot';

    if (sourceWorkbook.getWorksheet(sourceSheetName) && targetWorkbook.getWorksheet(targetSheetName)) {
        await copyData(sourceWorkbook, sourceSheetName, targetWorkbook, targetSheetName);
        console.log('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } else {
        console.log('–õ–∏—Å—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
}

hackSpot().then(() => console.log('–¢—ã –ø—Ä–æ—Å—Ç–æ –î–∂–µ–¥–∞–π, –±—Ä–∞—Ç–∞–Ω üòé'));
